-- select * from category_attributes
-- select * from category_leaves
-- select * from categories where id=4
-- select * from prod_attributes

-- FINDING THE DEPTH OF THE NODES
SELECT node.id,node.title,node.full_path, (COUNT(parent.id) - 1) AS depth
FROM categories AS node,
        categories AS parent
WHERE node.lft BETWEEN parent.lft AND parent.rgt 

GROUP BY node.title,node.lft ,node.id
HAVING (COUNT(parent.title) - 1) = 2
ORDER BY node.lft

-- FINDING ALL THE LEAF NODES
SELECT *
FROM categories
WHERE rgt = lft + 1 ;

--GET PARANT BY CHILD ID
(select * from (SELECT row_number() over(order by t2.rgt desc)-1 as depth,
t2.title,t2.id,t2.lft,t2.rgt
FROM categories t2 
WHERE t2.lft <= 131 AND t2.rgt >= 132	

ORDER BY t2.rgt desc) as parents 
-- where parents.depth=2
)
---------------------------------------
SELECT t1.id,t1.lft,t1.rgt,title,t1.full_path
, (select id from (SELECT row_number() over(order by t2.rgt desc)-1 as depth,
		t2.id
		FROM categories t2 
		WHERE t2.lft <= t1.lft AND t2.rgt >= t1.rgt	
		
		ORDER BY t2.rgt desc) as ps where ps.depth=2) AS lvl_id
FROM categories t1 where t1.rgt = t1.lft+1 and ts_path_search @@ phraseto_tsquery('health') 
ORDER BY ts_rank(ts_path_search, phraseto_tsquery('health')) DESC
limit 5
-------------------------------------

select count(distinct products.id) as aggregate from products
inner join prod_variants on products.id = prod_variants.fk_prod_id
inner join categories on categories.id = products.fk_category_id 
inner join pack_types on pack_types.id = products.fk_packtype_id 
inner join regions on regions.id = products.fk_currency_id 
inner join conditions on prod_variants.fk_condition_id = conditions.id 
left join variant_option_hdrs as option1 on products.fk_varopt_1_hdr_id = option1.id
left join variant_option_hdrs as option2 on products.fk_varopt_2_hdr_id = option2.id
left join variant_option_hdrs as option3 on products.fk_varopt_3_hdr_id = option3.id
left join files as file_1 on prod_variants.media_1_image = file_1.id
left join files as file_2 on prod_variants.media_2_image = file_2.id 
left join files as file_3 on prod_variants.media_3_image = file_3.id 
left join files as file_4 on prod_variants.media_4_image = file_4.id 
left join files as file_5 on prod_variants.media_5_image = file_5.id 
left join files as file_6 on prod_variants.media_6_image = file_6.id 
left join files as file_7 on prod_variants.media_7_image = file_7.id 
left join files as file_8 on prod_variants.media_8_video = file_8.id 
left join files as file_9 on prod_variants.media_9_video = file_9.id 
where products.fk_brand_id = 1

select distinct on (products.id) products.id
from products 
inner join prod_variants on products.id = prod_variants.fk_prod_id 
inner join categories on categories.id = products.fk_category_id 
inner join pack_types on pack_types.id = products.fk_packtype_id 
inner join regions on regions.id = products.fk_currency_id 
inner join conditions on prod_variants.fk_condition_id = conditions.id 
left join variant_option_hdrs as option1 on products.fk_varopt_1_hdr_id = option1.id 
left join variant_option_hdrs as option2 on products.fk_varopt_2_hdr_id = option2.id 
left join variant_option_hdrs as option3 on products.fk_varopt_3_hdr_id = option3.id 
left join files as file_1 on prod_variants.media_1_image = file_1.id 
left join files as file_2 on prod_variants.media_2_image = file_2.id 
left join files as file_3 on prod_variants.media_3_image = file_3.id 
left join files as file_4 on prod_variants.media_4_image = file_4.id 
left join files as file_5 on prod_variants.media_5_image = file_5.id 
left join files as file_6 on prod_variants.media_6_image = file_6.id 
left join files as file_7 on prod_variants.media_7_image = file_7.id 
left join files as file_8 on prod_variants.media_8_video = file_8.id 
left join files as file_9 on prod_variants.media_9_video = file_9.id 
where products.fk_brand_id = 1


------------------------------------------------------
select ts_search from prod_variants
ALTER TABLE prod_variants ADD column ts_search tsvector;
ALTER TABLE products ADD column ts_search tsvector;
update prod_variants set ts_search =  setweight(to_tsvector(coalesce(seller_sku, '')), 'A') ||
		 setweight(to_tsvector(coalesce(prod_desc, '')), 'B')

CREATE OR REPLACE FUNCTION prodvariant_tsvector_trigger() RETURNS trigger as $$
     begin
         new.ts_search := setweight(to_tsvector('english', coalesce(new.seller_sku, '')), 'A') ||
         setweight(to_tsvector('english', coalesce(new.var_1_title, '')), 'B') ||
		 setweight(to_tsvector('english', coalesce(new.var_2_title, '')), 'C') ||
		 setweight(to_tsvector('english', coalesce(new.var_3_title, '')), 'D') ||
		 setweight(to_tsvector('english', coalesce(new.prod_desc, '')), 'E');
         return new;
     end
 $$ LANGUAGE plpgsql;
 ---
DROP TRIGGER if exists prodvariant_tsvector_update on categories cascade;

CREATE TRIGGER prodvariant_tsvector_update BEFORE INSERT OR UPDATE
ON categories FOR EACH ROW EXECUTE PROCEDURE prodvariant_tsvector_trigger();

select p.title,v.seller_sku,v.prod_desc from prod_variants v inner join products p on p.id=v.fk_prod_id
where  v.seller_sku ilike 'Leather%' or to_tsvector(p.title || ' ' || v.seller_sku || ' ' || v.prod_desc) @@  phraseto_tsquery('Leather') 

select products.title from products 
inner join prod_variants on products.id = prod_variants.fk_prod_id 
inner join regions on regions.id = products.fk_currency_id 
inner join conditions on prod_variants.fk_condition_id = conditions.id 
left join variant_option_hdrs as option1 on products.fk_varopt_1_hdr_id = option1.id 
left join variant_option_hdrs as option2 on products.fk_varopt_2_hdr_id = option2.id 
left join variant_option_hdrs as option3 on products.fk_varopt_3_hdr_id = option3.id 
left join files as file_1 on prod_variants.media_1_image = file_1.id 
where products.fk_brand_id = 1 and 
to_tsvector(products.title || ' ' || prod_variants.seller_sku || ' ' || prod_variants.prod_desc) @@  phraseto_tsquery('something')




